#include <iostream>
#include <vector>
#include <stack>
#include <omp.h>
using namespace std;

const int MAX = 100000;
vector<int> graph[MAX];
bool visited[MAX];


void dfs(int node) {
	stack<int> s;
	s.push(node);
	
	while (!s.empty()) {
		int curr_node = s.top();
		s.pop();
		if (!visited[curr_node]) {
			visited[curr_node] = true;
			if (visited[curr_node]) {
				cout << curr_node << " ";
			}
			
			#pragma omp parallel for
			for (int i = 0; i < graph[curr_node].size(); i++) {
				int adj_node = graph[curr_node][i];
				if (!visited[adj_node]) {
					s.push(adj_node);
				}
			}
		}
	}
}



int main() {
	int n, m, start_node;
	cout << "Enter No of Node,Edges,and start node:" ;
	cin >> n >> m >> start_node;
	
	cout << "Enter Pair of edges:" ;
	for (int i = 0; i < m; i++) {
	int u, v;
	cin >> u >> v;
	
	graph[u].push_back(v);
	graph[v].push_back(u);
	}
	
	
	#pragma omp parallel for
	for (int i = 0; i < n; i++) {
		visited[i] = false;
	}
	dfs(start_node);
	
	return 0;
}




#include <iostream>
#include <vector>
#include <queue>
#include <omp.h>

using namespace std;

class Graph {
private:
    int numVertices;
    vector<vector<int>> adj;

public:
    Graph(int vertices) : numVertices(vertices), adj(vertices) {}

    void addEdge(int src, int dest) {
        adj[src].push_back(dest);
        adj[dest].push_back(src);
    }

    void parallelBFS(int startVertex) {
        vector<bool> visited(numVertices, false);
        queue<int> bfsQueue;
        bfsQueue.push(startVertex);
        visited[startVertex] = true;

        while (!bfsQueue.empty()) {
            int queueSize = bfsQueue.size();

            #pragma omp parallel for
            for (int i = 0; i < queueSize; ++i) {
                int currentVertex;
                #pragma omp critical
                {
                    currentVertex = bfsQueue.front();
                    bfsQueue.pop();
                }

                cout << currentVertex << " ";

                // Enqueue adjacent unvisited vertices
                for (int neighbor : adj[currentVertex]) {
                    if (!visited[neighbor]) {
                        #pragma omp critical
                        {
                            visited[neighbor] = true;
                            bfsQueue.push(neighbor);
                        }
                    }
                }
            }
        }
    }
};

int main() {
    int numVertices = 6;
    Graph graph(numVertices);

    graph.addEdge(0, 1);
    graph.addEdge(0, 2);
    graph.addEdge(1, 3);
    graph.addEdge(2, 4);
    graph.addEdge(2, 5);

    cout << "Breadth-First Search (BFS): ";
    graph.parallelBFS(0);
    cout << endl;

    return 0;
}
